% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TEfit.R
\name{TEfit}
\alias{TEfit}
\title{Fit a time-evolving model (nonlinear regression by minimizing error)}
\usage{
TEfit(varIn, linkFun = list(link = "identity"), errFun = "ols",
  changeFun = "expo", bootPars = tef_bootList(), blockTimeVar = NULL,
  covarTerms = list(), control = tef_control())
}
\arguments{
\item{varIn}{Data frame or vector. First column [or vector] is the time-dependent response variable. If available, second column is the time variable. All other columns are covariates, possibly involved in a link function.}

\item{linkFun}{A list defining a link function (i.e., 'identity', 'd_prime', 'weibull', or 'logistic')}

\item{errFun}{A string defining an error function (e.g., 'ols', 'logcosh', 'bernoulli').}

\item{changeFun}{A string defining the functional form of change (e.g., 'expo', 'power', 'weibull')}

\item{bootPars}{A list defining the details for bootstrapped fits. Defaults to no bootstrapping. Necessary for estimates of uncertainty around fits and for covariance between parameters.}

\item{blockTimeVar}{A string identifying which covariate is the time points of sub-scales (e.g., "blocks" of times within the overall timescale of data collection)}

\item{covarTerms}{An optional list of logical vectors indicating whether parameters should vary by covariates. See examples.}

\item{control}{A list of model parameters. Use of tef_control() is highly recommended.}
}
\value{
A \code{TEfit} S3 object including:
\describe{
\item{\code{model}}{The best fit of parameters to the dataset, along with associated items such as tests of goodness-of-fit and nonstationarity}
\item{\code{nullFit}}{The best fit of a model that does not change over time, but otherwise uses the same parameterization as \code{model}}
\item{\code{data}}{Data frame of the input variables fit by the model, with the additiona of fit values}
\item{\code{modList}}{List of model details}
\item{\code{bootList}}{\emph{if relevant} List of bootstrapped \code{TEfit} models.}
}
}
\description{
This is the primary function for the \code{TEfits} package. Fits a
time-evolving regression model. Many options are available for
various error functions, functional forms of change,
nested timescales, bootstrapping/subsampling/cross-validation, and so on.
Various handy S3 methods are available, such as
\code{plot}, \code{summary},
\code{coef}, and \code{simulate}.
}
\details{
TEfit defines a nonlinear regression model and re-fits that model
using \code{optim} numerous times, with random starting values, until
the highest-likelihood fitting runs also have parameters very similar to
one another (i.e., SD less than the convergence criterion). Runs are
implemented in batches of 10.

Bootstrapping or subsampling is specified as follows:
\code{bootPars=tef_bootList(resamples = 0, bootPercent = 1, bootTries = 20)}.
resamples refers to the number of times the model is re-fit on resampled data,
bootPercent is the proportion (between 0 and 1) of the data resampled, and
bootTries is the number of optimization runs attempted on each subsample.
bootPercent of 1, the default, implements resampling with replacement (bootstrapping).
bootPercent less than 1 implements resampling without replacement, fitting
the model to that subsample, and evaluation of the fit values on the
left-out subsample (i.e., cross-validation). bootTries defaults to the minimum (10).

Currently supported likelihood functions are
Sum of Squared Error ('ols'),
Root Mean Square Error ('rmse'),
Log-Hyperbolic-Cosine ('logcosh'),
Ex-Gaussian ('exGauss_mu' or 'exGauss_tau'; tau is recommended),
Bernoulli ('bernoulli'),

Currently supported link functions are
\code{identity} or \code{logit} or \code{weibull} or \code{d_prime}. Logistic is parameterized
such that change could occur in the threshold value (by default) and/or
the bias value (defaults to constant). Lapse rate defaults to .005
and threshold defaults to .75. Weibull is paramaterized such that change occurs in
the threshold value (by default .75), the lapse rate defaults to .005, and the
y-intercept defaults to .5.
For the d-prime link a \code{presence} variable is included, the pFA and pH are
first calculated using a windowed average of stimulus-present or
stimulus-absent trials (penalized to bound the max d-prime), then calculating the
by-timepoint d-prime, then fitting that d-prime as the response variable. See
\code{\link{tef_acc2dprime}} and \code{\link{tef_runningMean}} for details about the intermediate steps.

Currently supported change functions are
3-parameter exponential ('expo'; start, [inverse] rate, and asymptote),
blocked 3-parameter exponential ('expo_block'),
double exponential ('expo_double'),
3-parameter power ('power'; start, [inverse] rate, and asymptote),
4-parameter power ('power'; start, [inverse] rate, asymptote, and "previous learning time"),
4-parameter weibull ('weibull'; start, [inverse] rate, asymptote, and shape).

By default, the mean of the time-evolving model's fit values should be very similar to the mean of the null fit values.
This implemented by penalizing the time-evolving model's error multiplicatively by 1 + the square of the difference
between the average of the model prediction and the average of the null [non-time-evolving] prediction. This is intended to
constrain model predictions to a "sane" range. This constraint can be removed with `control=tef_control(penalizeMean=F)`.

\code{\link{plot.TEfit}}, \code{\link{summary.TEfit}},
\code{\link{coef.TEfit}}, and \code{\link{simulate.TEfit}}
methods are defined for the TEfit class.
}
\examples{
## example data:
dat <- data.frame(timeVar = 1:50, respVar = c(seq(.3,.9,length=25),seq(.9,.91,length=25))+rep(c(0,.01),25),covar1=rep(c(1,2),25),covar2 = rep(c(-3,-1,0,2,5),10))

## Default fitting of 'ols' error function and 3-parameter exponential change function:
m <- TEfit(dat[,c('respVar','timeVar')])
summary(m)
# view a plot of the model:
plot(m)

## 'bernoulli' error function:
m <- TEfit(dat[,c('respVar','timeVar')],errFun='bernoulli')
summary(m)

## 3-parameter power change function:
m <- TEfit(dat[,c('respVar','timeVar')],changeFun='power')
summary(m)
# view a plot of the model:
plot(m)

## logistic threshold change:
m <- TEfit(dat[,c('respVar','timeVar','covar2')],errFun='bernoulli',linkFun=list(link='logit',logistX='covar2'))

## include 2 covariates (on all 3 parameters by default):
m <- TEfit(dat[,c('respVar','timeVar','covar1','covar2')])
summary(m) # (likely does not converge due to too many [nonsense] covariates)
plot(m)

## include 2 covariates:
## asymptote and rate are affected by covar1, start and rate are affected by covar2
m <- TEfit(dat[,c('respVar','timeVar','covar1','covar2')],covarTerms=list(pStart=c(F,T),pRate=c(T,T),pAsym=c(T,F)))

## 50 bootstrapped fits:
 m <- TEfit(dat[,c('respVar','timeVar')],bootPars=tef_bootList(resamples=50))
 summary(m)
# view a plot of the model, with CI bands:
plot(m)
# view the predicted values of the model by plotting data simulated from the parameters:
. <- simulate(m,toPlot=T)

 ## 50 random-subsample 80/20 cross-validation fits:
 m <- TEfit(dat[,c('respVar','timeVar')],bootPars=tef_bootList(resamples=50,bootPercent=.8))
 summary(m)

 ## ## ## control parameters:

 ## Increase convergence tolerance to 0.1:
 m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(convergeTol=.1))

 ## Increase the maximum run number to 5000 (defaults to 200):
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(nTries=5000))

 ## If the function will asymptote in the given time period, then one option is to calculate the TE function stepwise: first get a stable fit of last 20\% of timepoints (if there are enough timepoints, average this with a stable fit to the last 10\% of timepoints). Then fit the start and rate of approach to this asymptote:
 m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(stepwise_asym = T))

 ## Put limits on the predicted values:
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(y_lim=c(.1,.9)))

 ## Put limits on the rate parameter:
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(rate_lim=c(2,4)))

 ## Remove the constraint that the time-evolving fit values should have the same mean as the null fit values:
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(penalizeMean=F))

 ## If rate parameter is hitting the boundary, try imposing a slight penalization for extreme rate values:
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(penalizeRate=T))

 ## Change the exponential change log base from 2 to e:
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(expBase=exp(1)))

 ## Change the rate parameter log base from 2 to e:
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(rateBase=exp(1)))

 ## Silence errors:
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(quietErrs=T))

 ## Fix a parameter [asymptote] to 0.8:
  m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(pFix=list(pAsym=.8)))

}
