library(tidyr)
library(ggplot2)
library(ACmisc)
knitr::opts_chunk$set(echo = TRUE)
# this one is good, but it's a bit confusign because the later-introduced ones start with above-zero trial numbers.
# This is really considering it as being one trajectory of learning that new items should join into; but that's odd.
# I really need to work through "what the model is asking" and then run them. The problem is that different parameterizations make
# different assumptions... for instance, a version of this where each sound starts at .333 would likely be more interpretable.
# SO, I should run that model ASAP for a comparison. The one question is... could participants solve later ones by mutual exclusivity?
load("m_k_allSubs_subAsym_allTrials_expo3_difficMods_20000_ovc.RData")
m_k_allSubs_diff_allTrials_expo3$fitted <- data.frame(m_k_allSubs_diff_allTrials_expo3$data, fitted(m_k_allSubs_diff_allTrials_expo3,ndraws = 200))
d_tmp <- aggregate(resp_corr_b ~ totalTrialNum + isDifficult + group_label + sounds, m_k_allSubs_diff_allTrials_expo3$data, mean)
m_k_allSubs_diff_allTrials_expo3$fitted_agg <- data_frame(d_tmp, data.frame(fitted(m_k_allSubs_diff_allTrials_expo3
, newdata = d_tmp
, ndraws = 200
, re_formula = ~ (1|sounds)
)) )
rm(d_tmp)
m_k_allSubs_diff_allTrials_expo3$zMatched_byTrial <- data.frame()
for(curSound in unique(m_k_allSubs_diff_allTrials_expo3$fitted_agg$sounds)){
d_tmp <- m_k_allSubs_diff_allTrials_expo3$fitted_agg[m_k_allSubs_diff_allTrials_expo3$fitted_agg$sounds == curSound,]
for(curTrial in unique(d_tmp$totalTrialNum)){
m_k_allSubs_diff_allTrials_expo3$zMatched_byTrial <- rbind(m_k_allSubs_diff_allTrials_expo3$zMatched_byTrial
,data.frame(
trialNum = curTrial
,sound = curSound
,zAge = as.numeric(
(d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Dyslexic','Estimate'] -
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Matched_by_Age','Estimate']
)/((
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Dyslexic','Est.Error'] +
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Matched_by_Age','Est.Error']
)/2))
,zReading = as.numeric(
(d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Dyslexic','Estimate'] -
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Matched_by_Reading','Estimate']
)/((
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Dyslexic','Est.Error'] +
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Matched_by_Reading','Est.Error']
)/2))
))
}
}
z_plot <- ggplot( m_k_allSubs_diff_allTrials_expo3$zMatched_byTrial,
aes(x = trialNum , color = sound)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_line(aes(y = zAge) , linetype = 1) +
geom_line(aes(y = zReading) , linetype = 2) +
labs(x = 'Trial Number'
,y = 'Z-score of dyslexic children vs typically-developing'
,caption = 'Solid line is age-matched; dashed line is reading-matched')
mod_plot <- ggplot(m_k_allSubs_diff_allTrials_expo3$fitted_agg,
aes(x = totalTrialNum, y = Estimate, color = group_label,fill = group_label
, linetype = sounds
, ymin = `Q2.5` , ymax = `Q97.5`) )+
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_ribbon(alpha = .2) +
geom_line() +
labs(x = 'Trial Number'
,y = 'Accuracy')
z_plot
mod_plot
# load("G:/My Drive/Aaron/DDMS/workspace/avl_kids_202204/avl_kids_202204_20kits.RData")
load("G:/My Drive/Aaron/DDMS/workspace/avl_kids_202204/avl_kids_202204.RData")
modLOO <- loo_compare(mlist[[1]],mlist[[2]],mlist[[3]],mlist[[5]],model_names = c(1,2,3,5))
bestMod <- mlist[[as.numeric(rownames(modLOO)[1])]]
load("C:/Users/coch0/OneDrive - unige.ch/AVL/avl_kids_agematched_readingmatched_last4blocks_20kitsmods.RData") # this has the models that the others have talked about, as using for final
load("C:/Users/coch0/OneDrive - unige.ch/AVL/mod_k_byStimNum_40000its_1_b.RData") # this has a seemingly-decent parameterization, with a couple caveats: [1] it should be bernoulli instead, [2] there should be a DD:difficulty interaction, [3] it should be split out by comparison group, [4] make sure rates are bounded to saturate within the timescale (i.e., we want to ensure that by the end of the task, the overall curve is driving our estimates)
reliable = function(modIn){
out <- data.frame(round(fixef(modIn),3),reliable = '')
out[sign(out$Q2.5) == sign(out$Q97.5),'reliable'] <- '*'
out[grep('Intercept',rownames(out)),'reliable'] <- '-'
rownames(out) <- gsub('Xform','',rownames(out))
rownames(out) <- gsub('_c','',rownames(out))
return(out)
}
## the differences are due to reading level, not maturation!
bothMods_dd_coefs <- merge(coef(m_k_ageMatched)[[1]][,'Estimate',],coef(m_k_readingMatched)[[1]][,'Estimate',],by=0,all=F)
# cor(bothMods_dd_coefs$pStartXform_Intercept.x,bothMods_dd_coefs$pStartXform_Intercept.y) # .907
# cor(bothMods_dd_coefs$pRate_Intercept.x,bothMods_dd_coefs$pRate_Intercept.y) # .978
## ## ## get learning plots:
p_ageMatched <- plot(
conditional_effects(m_k_ageMatched,'last4trialNum:isDD'
,int_conditions = list(isDD = c(-.5,.5))
,conditions = data.frame(Difficulty_c = c(-.5,.5)
,cond__ = c('Easy trials', 'Difficult trials'))
)
,plot=F)[[1]]
p_readingMatched <- plot(
conditional_effects(m_k_readingMatched,'last4trialNum:isDD'
,int_conditions = list(isDD = c(-.5,.5))
,conditions = data.frame(Difficulty_c = c(-.5,.5)
,cond__ = c('Easy trials', 'Difficult trials'))
)
,plot=F)[[1]]
## ## ## block transitions:
get4trials <- function(data,blockStart){
return(mean(as.matrix(data[data$totalTrialNum > (blockStart - 1) &
data$totalTrialNum < (blockStart + 4)
,'resp_corr'])))
}
d_nest <-
mod_k_byStimNum$data %>%
group_by(participant,TD_DD_c) %>%
nest() %>%
mutate(
end1 = map_dbl(data, ~ get4trials(.x,9))
,
start2 = map_dbl(data, ~ get4trials(.x,13))
,
end2 = map_dbl(data, ~ get4trials(.x,21))
,
start3 = map_dbl(data, ~ get4trials(.x,25))
,
end3 = map_dbl(data, ~ get4trials(.x,33))
,
start4 = map_dbl(data, ~ get4trials(.x,37))
,
one2two = start2 - end1
,
two2three = start3 - end2
,
three2four = start4 - end3
)
d_nest$readingCompare <- F
d_nest$ageCompare <- F
d_nest[d_nest$participant %in% unique(m_k_ageMatched$data$participant)
,'ageCompare'] <- T
d_nest[!d_nest$ageCompare | d_nest$TD_DD_c > 0
,'readingCompare'] <- T
d_nest$Group <- 'Reading-Matched'
d_nest[d_nest$ageCompare,'Group'] <- 'Age-Matched'
d_nest[d_nest$TD_DD_c > 0 , 'Group'] <- 'Dyslexic'
dLong <- pivot_longer(d_nest,end1:start4,names_to = 'timepoint', values_to = 'accuracy')
dLong$timepoint <- ordered(dLong$timepoint, names(d_nest)[4:9])
d_group_accs <- aggregate(resp_corr_b ~ sounds + totalTrialNum + group_label,
m_k_allSubs_diff_allTrials_expo3$data,mean)
d_group_accs$blockName <- paste0('block',ceiling(d_group_accs$totalTrialNum/12))
p_group_accs_blocks <- ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 1) +
facet_grid(~sounds)
p_group_accs <- ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .5) +
facet_grid(~sounds)
p_ageMatched
p_readingMatched
m_k_ageMatched
m_k_ageMatched
m_k_readingMatched
pwr::pwr.r.test(23,r = .3)
knitr::opts_chunk$set(echo = F)
library(knitr)
library(purrr)
library(dplyr)
library(brms)
library(tidyr)
library(ggplot2)
library(ACmisc)
knitr::opts_chunk$set(echo = TRUE)
# this one is good, but it's a bit confusign because the later-introduced ones start with above-zero trial numbers.
# This is really considering it as being one trajectory of learning that new items should join into; but that's odd.
# I really need to work through "what the model is asking" and then run them. The problem is that different parameterizations make
# different assumptions... for instance, a version of this where each sound starts at .333 would likely be more interpretable.
# SO, I should run that model ASAP for a comparison. The one question is... could participants solve later ones by mutual exclusivity?
load("m_k_allSubs_subAsym_allTrials_expo3_difficMods_20000_ovc.RData")
m_k_allSubs_diff_allTrials_expo3$fitted <- data.frame(m_k_allSubs_diff_allTrials_expo3$data, fitted(m_k_allSubs_diff_allTrials_expo3,ndraws = 200))
d_tmp <- aggregate(resp_corr_b ~ totalTrialNum + isDifficult + group_label + sounds, m_k_allSubs_diff_allTrials_expo3$data, mean)
m_k_allSubs_diff_allTrials_expo3$fitted_agg <- data_frame(d_tmp, data.frame(fitted(m_k_allSubs_diff_allTrials_expo3
, newdata = d_tmp
, ndraws = 200
, re_formula = ~ (1|sounds)
)) )
rm(d_tmp)
m_k_allSubs_diff_allTrials_expo3$zMatched_byTrial <- data.frame()
for(curSound in unique(m_k_allSubs_diff_allTrials_expo3$fitted_agg$sounds)){
d_tmp <- m_k_allSubs_diff_allTrials_expo3$fitted_agg[m_k_allSubs_diff_allTrials_expo3$fitted_agg$sounds == curSound,]
for(curTrial in unique(d_tmp$totalTrialNum)){
m_k_allSubs_diff_allTrials_expo3$zMatched_byTrial <- rbind(m_k_allSubs_diff_allTrials_expo3$zMatched_byTrial
,data.frame(
trialNum = curTrial
,sound = curSound
,zAge = as.numeric(
(d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Dyslexic','Estimate'] -
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Matched_by_Age','Estimate']
)/((
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Dyslexic','Est.Error'] +
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Matched_by_Age','Est.Error']
)/2))
,zReading = as.numeric(
(d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Dyslexic','Estimate'] -
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Matched_by_Reading','Estimate']
)/((
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Dyslexic','Est.Error'] +
d_tmp[d_tmp$totalTrialNum == curTrial &
d_tmp$sounds == curSound &
d_tmp$group_label == 'Matched_by_Reading','Est.Error']
)/2))
))
}
}
z_plot <- ggplot( m_k_allSubs_diff_allTrials_expo3$zMatched_byTrial,
aes(x = trialNum , color = sound)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_line(aes(y = zAge) , linetype = 1) +
geom_line(aes(y = zReading) , linetype = 2) +
labs(x = 'Trial Number'
,y = 'Z-score of dyslexic children vs typically-developing'
,caption = 'Solid line is age-matched; dashed line is reading-matched')
mod_plot <- ggplot(m_k_allSubs_diff_allTrials_expo3$fitted_agg,
aes(x = totalTrialNum, y = Estimate, color = group_label,fill = group_label
, linetype = sounds
, ymin = `Q2.5` , ymax = `Q97.5`) )+
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_ribbon(alpha = .2) +
geom_line() +
labs(x = 'Trial Number'
,y = 'Accuracy')
d_agg <- aggregate(resp_corr_b ~ group_label + participant, m_k_allSubs_diff_allTrials_expo3$data, mean)
# load("G:/My Drive/Aaron/DDMS/workspace/avl_kids_202204/avl_kids_202204_20kits.RData")
load("G:/My Drive/Aaron/DDMS/workspace/avl_kids_202204/avl_kids_202204.RData")
mod_plot <- ggplot(m_k_allSubs_diff_allTrials_expo3$fitted_agg,
aes(x = totalTrialNum, y = Estimate, color = group_label,fill = group_label
, linetype = sounds
, ymin = `Q2.5` , ymax = `Q97.5`) )+
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_ribbon(alpha = .2) +
geom_line() +
labs(x = 'Trial Number'
,y = 'Accuracy')
mod_plot
sink(NULL)
sink(NULL)
mod_plot
d_agg <- aggregate(resp_corr_b ~ group_label + participant, m_k_allSubs_diff_allTrials_expo3$data, mean)
d_group_accs <- aggregate(resp_corr_b ~ sounds + totalTrialNum + group_label,
m_k_allSubs_diff_allTrials_expo3$data,mean)
d_group_accs$blockName <- paste0('block',ceiling(d_group_accs$totalTrialNum/12))
p_group_accs_blocks <- ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 1) +
facet_grid(~sounds)
?loess
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 1, degree = 0) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 1, degree = 0) +
facet_grid(~sounds)
?geom_smooth
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, TEfits::tef_runningMean) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 1, method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 4, method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, method.args = list(span = 4,degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 1, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 1, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .1, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .5, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .4, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .3, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .2, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .3, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .3, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .4, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .5, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .6, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .7, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .8, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = .9, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(d_group_accs, aes(y = resp_corr_b,
x = totalTrialNum,
linetype = group_label
, color = blockName)) +
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_smooth(se=F, span = 1, method = 'loess',method.args = list(degree = 0)) +
facet_grid(~sounds)
ggplot(m_k_allSubs_diff_allTrials_expo3$fitted_agg,
aes(x = totalTrialNum, y = Estimate, color = group_label,fill = group_label
, linetype = sounds
, ymin = `Q2.5` , ymax = `Q97.5`) )+
theme_bw() + theme(text = element_text(family = 'serif')) +
geom_ribbon(alpha = .2) +
geom_line() +
facet_grid(~sounds) +
labs(x = 'Trial Number'
,y = 'Accuracy')
mList$exp3_full_7tree
rm(list = ls())
load("C:/Users/coch0/OneDrive - unige.ch/AVL/m_usn_fr_huvg.RData")
mList$exp3_taskGAM_noRun_1_fr
load("C:/Users/coch0/OneDrive - unige.ch/AVL/m_usn_fr_hgcc.RData")
mList$exp3_taskRunOffset_1_fr
mList$exp3_taskRunOffset_1_fr$prior
load("C:/Users/coch0/OneDrive - unige.ch/AVL/m_usn_fr_cemc.RData")
mList$exp3_taskRunOffset_1_fr
load("C:/Users/coch0/OneDrive - unige.ch/AVL/m_usn_fr_updated20220929_gcf.RData")
mlist_fr$exp3_taskGAM
load("C:/Users/coch0/OneDrive - unige.ch/AVL/m_usn_4kits_idsj.RData")
load("C:/Users/coch0/OneDrive - unige.ch/USN/mods_usn_4kits_wPriors_xpnqj_decent.RData")
rm(list = ls())
load("C:/Users/coch0/OneDrive - unige.ch/USN/mods_usn_4kits_wPriors_xpnqj_decent.RData")
mList$exp3_taskSplineStepwise_7tree_ix.RData
plot(mList$exp3_taskSplineStepwise_7tree_ix.RData)
rm(list= ls())
library(devtools)
install_github('akcochrane/TEfits')
library(TEfits)
?TEfit
m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(convergeTol=.1))
dat <- data.frame(timeVar = 1:50, respVar = c(seq(.3,.9,length=25),seq(.9,.91,length=25))+rep(c(0,.01),25),covar1=rep(c(1,2),25),covar2 = rep(c(-3,-1,0,2,5),10))
m <- TEfit(dat[,c('respVar','timeVar')],control=tef_control(convergeTol=.1))
m
summary(m)
?TEfit
?TEbrm
m3 <- TEbrm(
acc ~ tef_change_expo3('trialNum')
,data = anstrain_s1
,link_start_asym = 'inv_logit'
,family=bernoulli(link='identity')
)
rm(list=ls())
library(roxygen2)
library(devtools)
document('c:/Users/coch0/Documents/GitHub/TEfits/')
build('c:/Users/coch0/Documents/GitHub/TEfits/')
?build
devtools::build('c:/Users/coch0/Documents/GitHub/TEfits/')
setwd('c:/users/coch0/documents/github/TEfits/')
build('')
build('TEfits')
install()
rm(list = ls())
library(devtools)
?use_vignette
build_vignettes()
set.seed(111)
dat <- data.frame(
accuracy = rbinom(80,6,
.9-.5*2^(-rnorm(80,1:80,3)/5) # exponential change from .4 to .9 with a rate [half-change time constant] of log2(5+1)=2.58
)/6,
trial_number = 1:80
)
rm(list = ls())
build_vignettes()
library(devtools)
build_vignettes()
document()
install()
rm(list = ls())
