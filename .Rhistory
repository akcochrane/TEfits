##
, ggplot(d,aes(x=transferRate_z,y = Openess_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('B. '),
x = 'Rate (controlling for rate of learning in training)                                                             ' , # Generalization rate',
y = 'Openness to experience' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ Openess_z + trainRate_z,d,nBoot)
)
## ## ## ## ## ##
,cols=2)
multiplot(
##
###  Start - RT
##
ggplot(d,aes(x= transferRate_z,y = TS_SwitchCost_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('A. '),
x = '                                                                   Generalization Rate',
y = 'Task Switch Cost' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ TS_SwitchCost_z  + trainRate_z,d,nBoot)
)
##
###  Start - Painting
##
, ggplot(d,aes(x=transferRate_z,y = Openess_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('B. '),
x = 'Rate (controlling for rate of learning in training)                                                       ' , # Generalization rate',
y = 'Openness to experience' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ Openess_z + trainRate_z,d,nBoot)
)
## ## ## ## ## ##
,cols=2)
multiplot(
##
###  Start - RT
##
ggplot(d,aes(x= transferRate_z,y = TS_SwitchCost_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('A. '),
x = '                                                                   Generalization Rate',
y = 'Task Switch Cost' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ TS_SwitchCost_z  + trainRate_z,d,nBoot)
)
##
###  Start - Painting
##
, ggplot(d,aes(x=transferRate_z,y = Openess_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('B. '),
x = '(controlling for rate of learning in training)                                                       ' , # Generalization rate',
y = 'Openness to experience' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ Openess_z + trainRate_z,d,nBoot)
)
## ## ## ## ## ##
,cols=2)
multiplot(
##
###  Start - RT
##
ggplot(d,aes(x= transferRate_z,y = TS_SwitchCost_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('A. '),
x = '                                                             Generalization Rate',
y = 'Task Switch Cost' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ TS_SwitchCost_z  + trainRate_z,d,nBoot)
)
##
###  Start - Painting
##
, ggplot(d,aes(x=transferRate_z,y = Openess_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('B. '),
x = '(controlling for rate of learning in training)                                                       ' , # Generalization rate',
y = 'Openness to experience' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ Openess_z + trainRate_z,d,nBoot)
)
## ## ## ## ## ##
,cols=2)
multiplot(
##
###  Start - RT
##
ggplot(d,aes(x= transferRate_z,y = TS_SwitchCost_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('A. '),
x = '                                                          Generalization Rate',
y = 'Task Switch Cost' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ TS_SwitchCost_z  + trainRate_z,d,nBoot)
)
##
###  Start - Painting
##
, ggplot(d,aes(x=transferRate_z,y = Openess_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('B. '),
x = '(controlling for rate of learning in training)                                                       ' , # Generalization rate',
y = 'Openness to experience' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ Openess_z + trainRate_z,d,nBoot)
)
## ## ## ## ## ##
,cols=2)
multiplot(
##
###  Start - RT
##
ggplot(d,aes(x= transferRate_z,y = TS_SwitchCost_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('A. '),
x = '                                                      Generalization Rate',
y = 'Task Switch Cost' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ TS_SwitchCost_z  + trainRate_z,d,nBoot)
)
##
###  Start - Painting
##
, ggplot(d,aes(x=transferRate_z,y = Openess_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('B. '),
x = '(controlling for rate of learning in training)                                                       ' , # Generalization rate',
y = 'Openness to experience' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ Openess_z + trainRate_z,d,nBoot)
)
## ## ## ## ## ##
,cols=2)
nBoot <- 10000
multiplot(
##
###  Start - RT
##
ggplot(d,aes(x= transferRate_z,y = TS_SwitchCost_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('A. '),
x = '                                                      Generalization Rate',
y = 'Task Switch Cost' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ TS_SwitchCost_z  + trainRate_z,d,nBoot)
)
##
###  Start - Painting
##
, ggplot(d,aes(x=transferRate_z,y = Openess_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('B. '),
x = '(controlling for rate of learning in training)                                                       ' , # Generalization rate',
y = 'Openness to experience' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ Openess_z + trainRate_z,d,nBoot)
)
## ## ## ## ## ##
,cols=2)
nBoot <- 2500
multiplot(
##
###  Start - RT
##
ggplot(d,aes(x= transferRate_z,y = TS_SwitchCost_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('A. '),
x = '                                                      Generalization Rate',
y = 'Task Switch Cost' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ TS_SwitchCost_z  + trainRate,d,nBoot)
)
##
###  Start - Painting
##
, ggplot(d,aes(x=transferRate_z,y = Openess_z)) + theme_bw() + theme(text=element_text(family = 'serif'))+
geom_point() +
geom_smooth(color='black',method = 'lm') +
labs(
title = paste('B. '),
x = '(controlling for rate of learning in training)                                                       ' , # Generalization rate',
y = 'Openness to experience' , # Starting thresholds: Texture task (ms)',
subtitle = getPars(transferRate_z ~ Openess_z + trainRate,d,nBoot)
)
## ## ## ## ## ##
,cols=2)
?mad
?cMedian
x <- 1:5
mad(x)
mad(x,center=0)
mad(x,center=0,constant=1)
median(x)
mad(x,constant=1)
teCompList <- list()
library(brms)  ;  library(ggplot2)
brParRes <- function(mSumm,parName){
return(paste0(round(mSumm[paste0('th',parName,'_groupg2'),'Estimate'],2),' [',
round(mSumm[paste0('th',parName,'_groupg2'),'l.95..CI'],2),',',
round(mSumm[paste0('th',parName,'_groupg2'),'u.95..CI'],2),']'))
}
whichMod <- 2
load("C:/Users/AC/Google Drive/writing/diss/bookends/sims/teSim_bayes_2019Mar02_0100.RData")
mSumm <- summary(fitMods[[whichMod]])$fixed
mSumm <- data.frame(mSumm,rejNull=as.numeric(sign(mSumm[,'l-95% CI'])==sign(mSumm[,'u-95% CI'])))
d <- fitMods[[whichMod]]$data ; dAgg <- aggregate(resp ~ subID+group, d[d$trialNum>16,],mean)
tStandard <- t.test(dAgg[dAgg$group=='g1','resp'],dAgg[dAgg$group=='g2','resp'])
d <- fitMods[[whichMod]]$data ; dAgg <- aggregate(resp ~ subID+group, d[d$trialNum>0,],mean)
tAll <- t.test(dAgg[dAgg$group=='g1','resp'],dAgg[dAgg$group=='g2','resp'])
descript <- paste0('In this case, the generative model starting accuracy does not differ between groups ',
'(both ',round(groupList$g1['p_s'],2),
'), learning rate is different between groups (group 1: ',
round(groupList$g1['p_r'],2),'; group 2: ',round(groupList$g2['p_r'],2),
'), and asymptotic accuracy is different between groups (group 1: ',
round(groupList$g1['p_a'],2),'; group 2: ',round(groupList$g2['p_a'],2),
').Yet, when making comparisons across groups using  aggregated statistics, the true differences that exist',
' between the groups in terms of learning and asymptote are obscured.',
' This is true when data is aggregated across all trials (T(38) = ',
round(tAll$statistic,2),
') or when the first 16 trials are removed as practice and only the last',
' 48 trials are aggregated across (i.e., standard analysis; T(38) = ',
round(tStandard$statistic,2),
'). In contrast, when using a learning model to fit performance, group-level differences show ',
'specific patterns (that, as expected, recover the true process that was used to create the data).',
' The coefficient for the group difference in start is indistinguishable from zero (start = ',
brParRes(mSumm=mSumm,parName='Start'),
'), while the other two parameters show reliable group-level difference coefficients (rate = ',
brParRes(mSumm,'Rate'),'; asymptote = ',
brParRes(mSumm,'Asym'),'). '
)
# modPlot <- plot(marginal_effects(fitMods[[whichMod]],'trialNum:group'),plot=F)[[1]] +
#   theme_bw() + theme(text=element_text(family='serif'))
modPlot <- ggplot(d,aes(y=resp,x=trialNum,color=group,fill=group)) +
theme_bw() + theme(text=element_text(family = 'serif'))+ geom_smooth(method='loess')+
annotate('line',c(17,64),c(.85,.85)) +
annotate('text',20,.865,label=paste('Averaging over last 48 trials: T =',round(tStandard$statistic,2)),family='serif',hjust='left')  +
annotate('line',c(1,64),c(.80,.8)) +
annotate('text',20,.815,label=paste('Averaging over all trials: T =',round(tAll$statistic,2)),family='serif',hjust='left')  +
annotate('line',c(17,17),c(.86,.84))+
annotate('line',c(1,1),c(.81,.79))+
annotate('line',c(64,64),c(.86,.84))+
annotate('line',c(64,64),c(.81,.79))+
labs(x='Trial Number', y = 'Accuracy',color='Group',fill='Group')
teCompList[[length(teCompList)+1]] <- list(mSumm=mSumm, descript=descript, tStandard=tStandard,
tAll=tAll, groupPars=groupList,modPlot=modPlot,  dat=d,model = summary(fitMods[[whichMod]]))
rm(dA,fitMods,groupList,TEthetaForm,TEthetaPrior,adapt_delta,binomN,curT,lapse,d,dAgg,
nChains,nIters,nTrials,sampleSize,useCores,mSumm,tAll,tStandard,modPlot,descript,whichMod)
# do this: no diff in overall, diff in start, diff in rate
{
whichMod <- 1
load("C:/Users/AC/Google Drive/writing/diss/bookends/sims/teSim_bayes_2019Mar01_2312.RData")
mSumm <- summary(fitMods[[whichMod]])$fixed
mSumm <- data.frame(mSumm,rejNull=as.numeric(sign(mSumm[,'l-95% CI'])==sign(mSumm[,'u-95% CI'])))
d <- fitMods[[whichMod]]$data ; dAgg <- aggregate(resp ~ subID+group, d[d$trialNum>16,],mean)
tStandard <- t.test(dAgg[dAgg$group=='g1','resp'],dAgg[dAgg$group=='g2','resp'])
d <- fitMods[[whichMod]]$data ; dAgg <- aggregate(resp ~ subID+group, d[d$trialNum>0,],mean)
tAll <- t.test(dAgg[dAgg$group=='g1','resp'],dAgg[dAgg$group=='g2','resp'])
descript <- paste0('In this model, we see that no systematic differences between groups are evident when aggregated across all trials T(38) = ',
round(tStandard$statistic,2),
') or when comparing scores aggregated [averaged] within individuals’ last 48 trials (standard analysis T(38) = ',
round(tAll$statistic,2),
'). In contrast, when using a learning model to characterize performance, group-level differences show specific patterns.',
' The coefficient for the difference in asymptote does not meet our criterion for reliability (',
brParRes(mSumm=mSumm,parName='Asym'),
'), while the other two parameters show reliable group-level difference coefficients (rate = ',
brParRes(mSumm,'Rate'),'; start = ',
brParRes(mSumm,'Start'),'). '
)
# modPlot <- plot(marginal_effects(fitMods[[whichMod]],'trialNum:group'),plot=F)[[1]] +
#   theme_bw() + theme(text=element_text(family='serif'))
modPlot <-ggplot(d,aes(y=resp,x=trialNum,color=group,fill=group)) +
theme_bw() + theme(text=element_text(family = 'serif'))+ geom_smooth(method='loess') +
annotate('line',c(17,64),c(.85,.85)) +
annotate('text',20,.865,label=paste('Averaging over last 48 trials: T =',round(tStandard$statistic,2)),family='serif',hjust='left')  +
annotate('line',c(1,64),c(.80,.8)) +
annotate('text',20,.815,label=paste('Averaging over all trials: T =',round(tAll$statistic,2)),family='serif',hjust='left')  +
annotate('line',c(17,17),c(.86,.84))+
annotate('line',c(1,1),c(.81,.79))+
annotate('line',c(64,64),c(.86,.84))+
annotate('line',c(64,64),c(.81,.79))+
labs(x='Trial Number', y = 'Accuracy',color='Group',fill='Group')
teCompList[[length(teCompList)+1]] <- list(mSumm=mSumm, descript=descript, tStandard=tStandard,
tAll=tAll, groupPars=groupList,modPlot=modPlot, dat=d,model = summary(fitMods[[whichMod]]))
rm(dA,fitMods,groupList,TEthetaForm,TEthetaPrior,adapt_delta,binomN,curT,lapse,d,dAgg,
nChains,nIters,nTrials,sampleSize,useCores,mSumm,tAll,tStandard,modPlot,descript,whichMod)
}
source('../bookends/sims/get_sims_effects.R')
Ts <- c()
for (curSim in 1:1000){}
for (curSim in 1:1000){x <- rnorm(30); y <- rnorm(30) ; m <- lm(y~x),Ts <- c(Ts,m)}
x <- rnorm(30); y <- rnorm(30) ; m <- lm(y~x)
m$terms
summary(m)$Coefficients
summary(m)$oefficients
summary(m)$coefficients
summary(m)$coefficients['x','t value']
for (curSim in 1:1000){x <- rnorm(30); y <- rnorm(30) ; m <- lm(y~x),Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
for (curSim in 1:1000){x <- rnorm(30); y <- rnorm(30) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
plot(Ts)
sum(abs(Ts)>qt(.975,30))
nSims <- 1000
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(30); y <- rnorm(30) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,30))
nSims <- 1000
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(30); y <- rnorm(30) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,30))
sampleSize <- 50
nSims <- 1000
sampleSize <- 50
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- rnorm(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
nSims <- 1000
sampleSize <- 50
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- rnorm(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
nSims <- 1000
sampleSize <- 500
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- rnorm(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
nSims <- 1000
sampleSize <- 500
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- rnorm(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rexp(sampleSize); y <- rexp(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rexp(sampleSize); y <- rexp(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rexp(sampleSize); y <- rexp(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- exp(rnorm(sampleSize)); y <- exp(rnorm(sampleSize)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- exp(rnorm(sampleSize)); y <- exp(rnorm(sampleSize)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- exp(rnorm(sampleSize)); y <- exp(rnorm(sampleSize)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- exp(rnorm(sampleSize)); y <- exp(rnorm(sampleSize)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
exp(rnorm(sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize,1)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize,1)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize,1)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
sampleSize <- 30
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize,1)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize,1)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize,1)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rnorm(sampleSize); y <- exp(rnorm(sampleSize,1)) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rexp(sampleSize); y <- rexp(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rexp(sampleSize); y <- rexp(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rexp(sampleSize); y <- rexp(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rexp(sampleSize); y <- rexp(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
Ts <- c() ; for (. in 1:nSims){
x <- rexp(sampleSize); y <- rexp(sampleSize) ; m <- lm(y~x);Ts <- c(Ts,summary(m)$coefficients['x','t value'])}
mean(abs(Ts)>qt(.975,sampleSize))
?MASS::rlm
library(devtools)
?install_github
devtools::use_testthat('c:/users/ac/google drive/functions/fitpack/TEfits')
use_testthat('c:/users/ac/google drive/functions/fitpack/TEfits')
setwd('c:/users/ac/google drive/functions/fitpack/TEfits')
use_testthat()
library(TEfits)
d <- anstrain
d$absRat <- abs(d$ratio)
d$moreCatA <- as.numeric(d$ratio > 0)
m <- list()
m$ident_ols <- TEfitAll(d[,c('acc','trialNum')],
bootPars = tef_bootList(resamples = 20),groupingVar = d$subID)
expect_is({
m$ident_ols},
'TEfitAll')
library(testthat)
expect_is({
m$ident_ols},
'TEfitAll')
document()
rm(list=ls())
install()
library(testthat)
test_package('TEfits')
install()
library(devtools) ; install()
library(testthat)
test_package('TEfits')
?skip_on_travis
library(devtools) ; install()
library(devtools) ; document() ;  install()
testthat::test_package('TEfits')
d <- anstrain
d$absRat <- abs(d$ratio)
d$moreCatA <- as.numeric(d$ratio > 0)
m <- list()
library(TEfits)
d <- anstrain
d$absRat <- abs(d$ratio)
d$moreCatA <- as.numeric(d$ratio > 0)
m <- list()
### ###
test_that('TEfitAll runs with logistic link and bernoulli error function',{
skip_on_travis() # times out
expect_is({
m$logist_bern <- TEfitAll(d[,c('acc','trialNum','ratio')],
bootPars = tef_bootList(resamples = 20),groupingVar = d$subID,
linkFun = list(link='logit',logistX = 'ratio'),
errFun = 'bernoulli',
tef_control(nTries = 50))
m$logist_bern},
'TEfitAll')
})
m$dPrime <- TEfitAll(d[,c('acc','trialNum','moreCatA')],
bootPars = tef_bootList(resamples = 20),groupingVar = d$subID,
linkFun = list(link='d_prime',presence = 'moreCatA'),
tef_control(nTries = 50)
)
### ###
test_that('TEfitAll runs with d prime link function',{
skip_on_travis() # times out
expect_is({
m$dPrime <- TEfitAll(d[,c('acc','trialNum','moreCatA')],
bootPars = tef_bootList(resamples = 20),groupingVar = d$subID,
linkFun = list(link='d_prime',presence = 'moreCatA'),
tef_control(nTries = 50)
)
m$dPrime},
'TEfitAll')
})
rm(list=ls())
library(devtools) ; document() ;  install()
library(testthat)
test_package('TEfits')
library(devtools) ; document() ;  install()
test_package('TEfits')
library(testthat)
test_package('TEfits')
library(devtools) ; document() ;  install()
library(devtools) ; document() ;  install()
library(testthat) ; test_package('TEfits')
library(devtools) ; document() ;  install()
library(testthat) ; test_package('TEfits')
library(devtools) ; document() ;  install()
library(testthat) ; test_package('TEfits')
tef_control(suppressWarnings = T)
summary(TEfit(data.frame(yy=rnorm(20),tt=1:20)))
summary(TEfit(data.frame(yy=rnorm(20),tt=1:20)),tef_control(suppressWarnings = T))
summary(TEfit(data.frame(yy=rnorm(20),tt=1:20)),control = tef_control(suppressWarnings = T))
summary(TEfit(data.frame(yy=rnorm(20),tt=1:20),control = tef_control(suppressWarnings = T)))
library(devtools) ; document() ;  install()
library(testthat) ; test_package('TEfits')
library(devtools) ; document() ;  install()
library(devtools) ; document() ;  install()
library(testthat) ; test_package('TEfits')
library(devtools) ; document() ;  install(build_vignettes=T)
vignette('TEfits')
browseVignettes('TEfits')
browseVignettes('TEfits')
