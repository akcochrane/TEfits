## GAM spline
if(F){ # as of 2024-02-18, crashes R; perhaps due to memory?
dTmp <- aggDat_fixedTime[aggDat_fixedTime$experGroup != 'dense' &
aggDat_fixedTime$trainTest == 'train' &
aggDat_fixedTime$respCondition == 'fixedTime',]
dTmp$subjDay <- paste0(dTmp$subID,'_day',dTmp$day)
bForm <- brmsformula(formula(paste0('accBin ~',weibPF))
, logisthreshold ~ subjDay + dayTrial +
s(dayTrial
,by = subjDay
,k = 10
)
,log2shape ~ (1|subjDay)
,nl=T)
m_weib_gam <- brm(bForm
,data = dTmp
,data2 = dTmp
, prior = prior('normal(-1,2)',nlpar = 'logisthreshold') +
prior('normal(0,2)',nlpar = 'log2shape')
, family = bernoulli(link = 'identity')
# ,backend = 'cmdstanr'
, iter = fitIter, chains = 2, cores = 2, thin = 2
, control = list(adapt_delta = adapt_delt, max_treedepth = 11) # this will probably be necessary with `totalTrialNum:experGroup`
)
m_weib_gam$fittedLogThresh <- as.data.frame(fitted(m_weib_gam
, nlpar = 'logisthreshold'
, newdata = dTmp
, ndraws = min(c(200, round(fitIter/5)))
))
}else{m_weib_gam <- NA}
}
## ## ## ## ## ## ## ## ##
## ## ## ## ## ## ## ## ## ## ## ##
## ## ## ## ## ## ## ## ##
### >> by-subject by-day pupilcomponents <<
{
source('get_pupil_dims.R')
aggDat_fixedTime$key <- paste0(aggDat_fixedTime$subID,'_',aggDat_fixedTime$totalTrialNum)
aggDat_respTime <- arrange(aggDat_respTime,subID,totalTrialNum)
aggDat_fixedTime <- arrange(aggDat_fixedTime,subID,totalTrialNum)
allDat <- arrange(allDat,subID,totalTrialNum,stimLockTimeDS)
# the errors here should hopefully only occur during RT blocks
aggDat_fixedTime$PC1_bySubjDay <-
aggDat_fixedTime$PC2_bySubjDay <- NA
PC_bySubjDay <- data.frame()
for(curSubj in unique(aggDat_fixedTime$subID)){
for(curDay in 1:5){
try({
tmp_inds <- which( allDat$subID == curSubj &
allDat$day == curDay &
allDat$stimLockTimeDS >= 0 &
allDat$stimLockTimeDS <= 3000)
pupilDim_subjDay <- get_pupil_dims(pupilData =
allDat[tmp_inds, "pupil_baselined_interp"]
,timePoints =
allDat[tmp_inds, "stimLockTimeDS"]
,trialNumber =
paste0(
allDat[tmp_inds,"subID"]
,'_'
,allDat[tmp_inds, "totalTrialNum"]
)
,keepDims = 5
)
trial_pca_scores <- pupilDim_subjDay$trial_scores[,c('trialNumber',"PC1","PC2")]
PC_bySubjDay <- rbind(PC_bySubjDay,data.frame(
subID = curSubj
,day = curDay
,stimLockTimeDS = as.numeric(gsub('t_','',rownames(pupilDim_subjDay$time_weights)))
,loadings = pupilDim_subjDay$time_loadings
, weights = pupilDim_subjDay$time_weights
,varAccount_PC1 = pupilDim_subjDay$dim_red_mod$Vaccounted['Proportion Var','PC1']
,varAccount_PC2 = pupilDim_subjDay$dim_red_mod$Vaccounted['Proportion Var','PC2']
,varAccount_PC3 = pupilDim_subjDay$dim_red_mod$Vaccounted['Proportion Var','PC3']
,varAccount_PC4 = pupilDim_subjDay$dim_red_mod$Vaccounted['Proportion Var','PC4']
,varAccount_PC5 = pupilDim_subjDay$dim_red_mod$Vaccounted['Proportion Var','PC5']
))
for(curTrial in unique(trial_pca_scores$trialNumber)){
aggDat_fixedTime[aggDat_fixedTime$key == curTrial,c('PC1_bySubjDay','PC2_bySubjDay')] <-
trial_pca_scores[trial_pca_scores$trialNumber == curTrial,c('PC1','PC2')]
}
rm(pupilDim_subjDay,trial_pca_scores,curTrial)
})
}
}
mean(is.na(aggDat_fixedTime[aggDat_fixedTime$respCondition == 'fixedTime' &
aggDat_fixedTime$day < 6
,'PC1_bySubjDay'])) # still have missing, but only on day 6
compPlots <- list()
compPlots$PC1_by_subj_day <- ggplot(PC_bySubjDay[grepl('fi',PC_bySubjDay$subID),]
,aes(x = stimLockTimeDS
,y = weights.PC1
,color = subID)) +
theme_bw() +
geom_hline(yintercept = 0, linetype = 2) +
geom_vline(xintercept = 0, linetype = 2) +
stat_summary(fun.y = mean, geom = 'line') +
labs(x = 'Stimulus Presentation Time'
,caption = paste0('mean R2 = ',signif(mean(PC_bySubjDay$varAccount_PC1),2)))
compPlots$PC2_by_subj_day <- ggplot(PC_bySubjDay[grepl('fi',PC_bySubjDay$subID),]
,aes(x = stimLockTimeDS
,y = weights.PC2
,color = subID)) +
theme_bw() +
geom_hline(yintercept = 0, linetype = 2) +
geom_vline(xintercept = 0, linetype = 2) +
stat_summary(fun.y = mean, geom = 'line') +
labs(x = 'Stimulus Presentation Time'
,caption = paste0('mean R2 = ',signif(mean(PC_bySubjDay$varAccount_PC2),2)))
compPlots$PC3_by_subj_day <- ggplot(PC_bySubjDay[grepl('fi',PC_bySubjDay$subID),]
,aes(x = stimLockTimeDS
,y = weights.PC3
,color = subID)) +
theme_bw() +
geom_hline(yintercept = 0, linetype = 2) +
geom_vline(xintercept = 0, linetype = 2) +
stat_summary(fun.y = mean, geom = 'line') +
labs(x = 'Stimulus Presentation Time'
,caption = paste0('mean R2 = ',signif(mean(PC_bySubjDay$varAccount_PC3),2)))
compPlots$PC4_by_subj_day <- ggplot(PC_bySubjDay[grepl('fi',PC_bySubjDay$subID),]
,aes(x = stimLockTimeDS
,y = weights.PC4
,color = subID)) +
theme_bw() +
geom_hline(yintercept = 0, linetype = 2) +
geom_vline(xintercept = 0, linetype = 2) +
stat_summary(fun.y = mean, geom = 'line') +
labs(x = 'Stimulus Presentation Time'
,caption = paste0('mean R2 = ',signif(mean(PC_bySubjDay$varAccount_PC4),2)))
compPlots$PC5_by_subj_day <- ggplot(PC_bySubjDay[grepl('fi',PC_bySubjDay$subID),]
,aes(x = stimLockTimeDS
,y = weights.PC5
,color = subID)) +
theme_bw() +
geom_hline(yintercept = 0, linetype = 2) +
geom_vline(xintercept = 0, linetype = 2) +
stat_summary(fun.y = mean, geom = 'line') +
labs(x = 'Stimulus Presentation Time'
,caption = paste0('mean R2 = ',signif(mean(PC_bySubjDay$varAccount_PC5),2)))
# grid.arrange(compPlots$PC1_by_subj_day,compPlots$PC2_by_subj_day,ncol=1)
aggDat_fixedTime$key <- NULL
}
## ## ## ## ## ## ## ## ##
## ## ## ## ## ## ## ## ## ## ## ##
## ## ## ## ## ## ## ## ##
### >> Save <<
if(T){
save(allDat,aggDat_fixedTime, aggDat_respTime , aggDDM, PC_bySubjDay
, blockPlots, compPlots
, m_weib_basis , m_weib, m_weib_gam
, file = paste0('mot_learn_allDat_dayBases_',initChar,length(unique(allDat$subID)),'subjs_',Sys.Date(),'.RData'))
rm(list = ls()[!(ls() %in% c('allDat','aggDat_fixedTime','aggDat_respTime'
, 'aggDDM', 'blockPlots' , 'compPlots'
, 'm_weib_basis','m_weib') )])
}
## fixed time
aggDat_fixedTime <- aggregate(pupil_baselined ~ subID +
day + blockNum + cumBlockNum +
trialNum + totalTrialNum + dayTrial +
response + accMean_k5 + accBin +
targetAccuracy + accuracy +
motDirection + blockDirCond +
motionCoherence + date +
condition + experGroup +
trainDir + trainTest +
exper + respCondition
,allDat[allDat$respCondition == 'fixedTime' &
allDat$stimLockTimeDS > 50 &
allDat$stimLockTimeDS < 2550,]
,max,na.rm=T)
aggDat_fixedTime <- aggDat_fixedTime[with(aggDat_fixedTime # re-order to be sensible
, order(subID, day, blockNum, trialNum))
, ]
colnames(aggDat_fixedTime)[colnames(aggDat_fixedTime) == 'pupil_baselined'] <- 'pupil_baselined_max'
aggDat_fixedTime$pupil_baselined_max_norm <- NA ; for(curSubj in unique(aggDat_fixedTime$subID)){
aggDat_fixedTime[aggDat_fixedTime$subID %in%curSubj,'pupil_baselined_max_norm'] <-
norm_5_95(aggDat_fixedTime[aggDat_fixedTime$subID %in%curSubj,'pupil_baselined_max'])
}
aggDat_fixedTime$motCoherence_norm <- as.numeric(scale(YeoJohn(aggDat_fixedTime$motDirection)))
xtabs(~ subID + day + experGroup , aggDat_fixedTime)
xtabs(~ subID + day , aggDat_fixedTime)
xtabs(~ subID + cumBlockNum , aggDat_fixedTime)
xtabs(~ subID + cumBlockNum , aggDat_fixedTime)
rm(list = ls())
install.packages('fda')
library(fda)
install.packages('RCurl')
fda::create.bspline.basis(1:2)
install.packages('RCurl')
fda::create.bspline.basis(1:2)
library(fda)
library(fda)
#' to the distance between the basis centers, that is, each basis function
#' uses appxroximately \code{dnorm(time_vector,basis_center,basis_width / .5875)}.
#' The bases are then normalized so that each timepoint's bases sum to 1.
#'
#' @param timeVar Vector of time (e.g., trial number)
#' @param basisDens Space between basis function peaks
#' @param basis_calc_fun The function with which to calculate the basis functions.
#'
#' @export
#'
time_basisFun_df <- function(timeVar,basisDens, basis_calc_fun='gaussian'){
if(is.character(basis_calc_fun)){
constAdj <- sqrt(2 * log(2)) /2
calc_fun <- switch(basis_calc_fun
,gaussian = function(...,width){dnorm(...,sd=width/constAdj )}
,bspline = function(...){create.bspline.basis()}
)
}else{
error('basis calculation function not one of available options')
library(fda)
calc_fun <- create.bspline.basis()
}
basisDF_ref <- data.frame(time_orig = sort(unique(na.omit(timeVar))))
lowerOffset <- signif(mean(diff(timeVar)),2)
basisCenters <- seq(min(basisDF_ref$time_orig) - (basisDens/2+lowerOffset)
,max(basisDF_ref$time_orig) + basisDens/2
,basisDens)
basisNamePrec <- 3 - nchar(signif(max(basisCenters) - min(basisCenters),3))
for(curBasisCenter in basisCenters){
basisDF_ref[,paste0('basis_cen_',round(curBasisCenter,basisNamePrec))] <-
calc_fun(basisDF_ref$time_orig, curBasisCenter, width = basisDens/2)
}
colnames(basisDF_ref) <- gsub('-','M', colnames(basisDF_ref),fixed = T)
basisDF_ref[,2:ncol(basisDF_ref)] <-
basisDF_ref[,2:ncol(basisDF_ref)] / rowSums(basisDF_ref[,2:ncol(basisDF_ref)])
timeOut <- data.frame(order_orig = 1:length(timeVar),time_orig = timeVar)
timeOut <- merge(timeOut,  basisDF_ref, by='time_orig')
timeOut <- timeOut[order(timeOut$order_orig),]
timeOut$order_orig <- NULL
attr(timeOut,'basis_centers') <- basisCenters
return(timeOut)
}
timeVar <- 1:50
basisDens <- 15
basis_calc_fun='gaussian'
if(is.character(basis_calc_fun)){
constAdj <- sqrt(2 * log(2)) /2
calc_fun <- switch(basis_calc_fun
,gaussian = function(...,width){dnorm(...,sd=width/constAdj )}
,bspline = function(...){create.bspline.basis()}
)
}else{
error('basis calculation function not one of available options')
library(fda)
calc_fun <- create.bspline.basis()
}
basisDF_ref <- data.frame(time_orig = sort(unique(na.omit(timeVar))))
lowerOffset <- signif(mean(diff(timeVar)),2)
basisCenters <- seq(min(basisDF_ref$time_orig) - (basisDens/2+lowerOffset)
,max(basisDF_ref$time_orig) + basisDens/2
,basisDens)
basisNamePrec <- 3 - nchar(signif(max(basisCenters) - min(basisCenters),3))
?create.bspline.basis
bspline = function(...){create.bspline.basis(...,rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,breaks = length(basisCenters))}
bpline()
bspline()
basisCenters
?getbasismatrix
rm(list = ls*)
rm(list = ls())
timeVar <- 1:100
basisDens <- 20
calc_fun <- function(...,width){dnorm(...,sd=width/constAdj )}
lowerOffset <- signif(mean(diff(timeVar)),2)
basisCenters <- seq(min(basisDF_ref$time_orig) - (basisDens/2+lowerOffset)
,max(basisDF_ref$time_orig) + basisDens/2
,basisDens)
basisDF_ref <- data.frame(time_orig = sort(unique(na.omit(timeVar))))
lowerOffset <- signif(mean(diff(timeVar)),2)
basisCenters <- seq(min(basisDF_ref$time_orig) - (basisDens/2+lowerOffset)
,max(basisDF_ref$time_orig) + basisDens/2
,basisDens)
basisNamePrec <- 3 - nchar(signif(max(basisCenters) - min(basisCenters),3))
for(curBasisCenter in basisCenters){
basisDF_ref[,paste0('basis_cen_',round(curBasisCenter,basisNamePrec))] <-
calc_fun(basisDF_ref$time_orig, curBasisCenter, width = basisDens/2)
}
constAdj <- sqrt(2 * log(2)) /2
for(curBasisCenter in basisCenters){
basisDF_ref[,paste0('basis_cen_',round(curBasisCenter,basisNamePrec))] <-
calc_fun(basisDF_ref$time_orig, curBasisCenter, width = basisDens/2)
}
colnames(basisDF_ref) <- gsub('-','M', colnames(basisDF_ref),fixed = T)
basisDF_ref[,2:ncol(basisDF_ref)] <-
basisDF_ref[,2:ncol(basisDF_ref)] / rowSums(basisDF_ref[,2:ncol(basisDF_ref)])
timeOut <- data.frame(order_orig = 1:length(timeVar),time_orig = timeVar)
timeOut <- merge(timeOut,  basisDF_ref, by='time_orig')
timeOut <- timeOut[order(timeOut$order_orig),]
timeOut$order_orig <- NULL
basisDF_ref <- data.frame(time_orig = sort(unique(na.omit(timeVar))))
library(fda)
nBases <- round(length(timeVar)/basisDens)
bsplines <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,nbasis = nBases
,breaks = length(basisCenters))
bsplines <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,nbasis = nBases
}
)
bsplines <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max
(timeVar,na.rm = T))
,nbasis = nBases)
bsplineVals <- fd(coef = diag(rep(1,nBases))
,basisobj = bsplineObj)
bsplineObj <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,nbasis = nBases)
bsplineVals <- fd(coef = diag(rep(1,nBases))
,basisobj = bsplineObj)
plot(bsplineVals)
?eval.basis
eval(timeVar,bsplineObj)
eval.basis(timeVar,bsplineObj)
bsplineObj <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,nbasis = nBases)
basisDF_ref <- cbind(basisDF_ref,eval.basis(basisDF_ref$time_orig,bsplineObj)
}
)
basisDF_ref <- cbind(basisDF_ref,eval.basis(basisDF_ref$time_orig,bsplineObj) )
View(basisDF_ref)
timeOut <- data.frame(order_orig = 1:length(timeVar),time_orig = timeVar)
timeOut <- merge(timeOut,  basisDF_ref, by='time_orig')
timeOut <- timeOut[order(timeOut$order_orig),]
timeOut$order_orig <- NULL
center.fd(bsplineObj)
center.fd(fd(bsplineObj))
center.fd(coef= diag(rep(1,nBases)),fd(bsplineObj))
center.fd(fd(coef= diag(rep(1,nBases)),bsplineObj))
basisDF_ref <- data.frame(time_orig = sort(unique(na.omit(timeVar))))
## find the centers
basisCenters <- c()
## find the centers
basisCenters <- c()
for(curBasis in 2:ncol(basisDF_ref)){
basisCenters <- c(basisCenters
,basisDF_ref$time_orig[which.max(basisDF_ref[,curBasis])])
}
ncol(basisDF_ref)
bsplineObj <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,nbasis = nBases)
basisDF_ref <- cbind(basisDF_ref,eval.basis(basisDF_ref$time_orig,bsplineObj) )
## find the centers
basisCenters <- c()
for(curBasis in 2:ncol(basisDF_ref)){
basisCenters <- c(basisCenters
,basisDF_ref$time_orig[which.max(basisDF_ref[,curBasis])])
}
basisCenters
nBases <- ceiling(length(timeVar)/basisDens)
nBases <- floor(length(timeVar)/basisDens) + 1
bsplineObj <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,nbasis = nBases)
basisDF_ref <- data.frame(time_orig = sort(unique(na.omit(timeVar))))
basisDF_ref <- cbind(basisDF_ref,eval.basis(basisDF_ref$time_orig,bsplineObj) )
## find the centers
basisCenters <- c()
for(curBasis in 2:ncol(basisDF_ref)){
basisCenters <- c(basisCenters
,basisDF_ref$time_orig[which.max(basisDF_ref[,curBasis])])
}
basisCenters
rm(list = ls())
#' to the distance between the basis centers, that is, each basis function
#' uses appxroximately \code{dnorm(time_vector,basis_center,basis_width / .5875)}.
#' The bases are then normalized so that each timepoint's bases sum to 1.
#'
#' @param timeVar Vector of time (e.g., trial number)
#' @param basisDens Space between basis function peaks (equal if gaussian; approximate if bspline)
#' @param basis_calc_fun The function with which to calculate the basis functions. Either \code{bspline} (relies on \code{fda} package) or \code{gaussian}.
#'
#' @export
#'
time_basisFun_df <- function(timeVar,basisDens, basis_calc_fun='gaussian'){
# so basically, it's unlikely to be easy to shoehorn the gaussian and bspline together
# so much better to just have each pipeline independently within the switch/case
basisDF_ref <- data.frame(time_orig = sort(unique(na.omit(timeVar))))
if(is.character(basis_calc_fun)){
timeOut <- switch(basis_calc_fun
,gaussian = {
calc_fun <- function(...,width){dnorm(...,sd=width/constAdj )}
constAdj <- sqrt(2 * log(2)) /2
lowerOffset <- signif(mean(diff(timeVar)),2)
basisCenters <- seq(min(basisDF_ref$time_orig) - (basisDens/2+lowerOffset)
,max(basisDF_ref$time_orig) + basisDens/2
,basisDens)
basisNamePrec <- 3 - nchar(signif(max(basisCenters) - min(basisCenters),3))
for(curBasisCenter in basisCenters){
basisDF_ref[,paste0('basis_cen_',round(curBasisCenter,basisNamePrec))] <-
calc_fun(basisDF_ref$time_orig, curBasisCenter, width = basisDens/2)
}
colnames(basisDF_ref) <- gsub('-','M', colnames(basisDF_ref),fixed = T)
basisDF_ref[,2:ncol(basisDF_ref)] <-
basisDF_ref[,2:ncol(basisDF_ref)] / rowSums(basisDF_ref[,2:ncol(basisDF_ref)])
}
,bspline ={
library(fda)
nBases <- floor(length(timeVar)/basisDens) + 1
bsplineObj <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,nbasis = nBases)
basisDF_ref <- cbind(basisDF_ref,eval.basis(basisDF_ref$time_orig,bsplineObj) )
## find the centers
basisCenters <- c()
for(curBasis in 2:ncol(basisDF_ref)){
basisCenters <- c(basisCenters
,basisDF_ref$time_orig[which.max(basisDF_ref[,curBasis])])
}
}
)
}else{
error('basis calculation function not one of available options')
}
timeOut <- data.frame(order_orig = 1:length(timeVar),time_orig = timeVar)
timeOut <- merge(timeOut,  basisDF_ref, by='time_orig')
timeOut <- timeOut[order(timeOut$order_orig),]
timeOut$order_orig <- NULL
attr(timeOut,'basis_centers') <- basisCenters
return(timeOut)
}
b_g <- time_basisFun_df(1:100,15,'gaussian')
b_s <- time_basisFun_df(1:100,15,'bspline')
b_s <- time_basisFun_df(1:100,15,'bsplin')
b_s <- time_basisFun_df(1:100,15,'bspline')
rm(list= l())
rm(list= ls())
#' Construct basis functions
#'
#' Given a numeric time vector, construct a set of overlapping basis functions.
#'
#' Bases are equally-spaced with respect to time. Together, entered as linear predictors
#' into a typical regression model, each basis function acts as a "bump" offset from the
#' overall model fit, thereby approximating arbitrary nonlinear changes over time.
#'
#' The function defining the bases defaults to Gaussian with a half-width half-max equal
#' to the distance between the basis centers, that is, each basis function
#' uses appxroximately \code{dnorm(time_vector,basis_center,basis_width / .5875)}.
#' The bases are then normalized so that each timepoint's bases sum to 1.
#'
#' @param timeVar Vector of time (e.g., trial number)
#' @param basisDens Space between basis function peaks (equal if gaussian; approximate if bspline)
#' @param basis_calc_fun The function with which to calculate the basis functions. Either \code{bspline} (relies on \code{fda} package) or \code{gaussian}.
#'
#' @export
#'
time_basisFun_df <- function(timeVar,basisDens, basis_calc_fun='gaussian'){
# so basically, it's unlikely to be easy to shoehorn the gaussian and bspline together
# so much better to just have each pipeline independently within the switch/case
basisDF_ref <- data.frame(time_orig = sort(unique(na.omit(timeVar))))
if(is.character(basis_calc_fun)){
timeOut <- switch(basis_calc_fun
,gaussian = {
calc_fun <- function(...,width){dnorm(...,sd=width/constAdj )}
constAdj <- sqrt(2 * log(2)) /2
lowerOffset <- signif(mean(diff(timeVar)),2)
basisCenters <- seq(min(basisDF_ref$time_orig) - (basisDens/2+lowerOffset)
,max(basisDF_ref$time_orig) + basisDens/2
,basisDens)
basisNamePrec <- 3 - nchar(signif(max(basisCenters) - min(basisCenters),3))
for(curBasisCenter in basisCenters){
basisDF_ref[,paste0('basis_cen_',round(curBasisCenter,basisNamePrec))] <-
calc_fun(basisDF_ref$time_orig, curBasisCenter, width = basisDens/2)
}
colnames(basisDF_ref) <- gsub('-','M', colnames(basisDF_ref),fixed = T)
basisDF_ref[,2:ncol(basisDF_ref)] <-
basisDF_ref[,2:ncol(basisDF_ref)] / rowSums(basisDF_ref[,2:ncol(basisDF_ref)])
}
,bspline ={
library(fda)
nBases <- floor(length(timeVar)/basisDens) + 1
bsplineObj <- create.bspline.basis(rangeval = c(min(timeVar,na.rm=T)
,max(timeVar,na.rm = T))
,nbasis = nBases)
basisDF_ref <- cbind(basisDF_ref,eval.basis(basisDF_ref$time_orig,bsplineObj) )
## find the centers
basisCenters <- c()
for(curBasis in 2:ncol(basisDF_ref)){
curBasisMode <- basisDF_ref$time_orig[which.max(basisDF_ref[,curBasis])]
basisCenters <- c(basisCenters
,curBasisMode)
colnames(basisDF_ref)[curBasis] <- paste0('basis_mode_',curBasisMode)
}
}
)
}else{
error('basis calculation function not one of available options')
}
timeOut <- data.frame(order_orig = 1:length(timeVar),time_orig = timeVar)
timeOut <- merge(timeOut,  basisDF_ref, by='time_orig')
timeOut <- timeOut[order(timeOut$order_orig),]
timeOut$order_orig <- NULL
attr(timeOut,'basis_centers') <- basisCenters
return(timeOut)
}
b_s <- time_basisFun_df(1:100,15,'bspline')
b_g <- time_basisFun_df(1:100,15,'gaussian')
rm(list = ls())
setwd('c:/users/coch0/Documents/GitHub/TEfits/')
library(devtools)
document()
library(devtools)
install()
devtools::document()
